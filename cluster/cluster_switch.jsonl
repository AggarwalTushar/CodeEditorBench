{"num": 5, "language": "java", "similar_source_code": "```java\npublic int minMoves(int[] nums, int limit) {\n    int n = nums.length;\n    int[] delta = new int[2 * limit + 2];\n\n    for (int i = 0; i < n / 2; i++) {\n        int lo = Math.min(nums[i], nums[n - 1 - i]) + 1;\n        int hi = Math.max(nums[i], nums[n - 1 - i]) + limit;\n        delta[lo]--;\n        delta[nums[i] + nums[n - 1 - i]]--;\n        delta[hi + 1]++;\n    }\n    int moves = n, current = n;\n    for (int i = 2; i <= 2 * limit; i++) {\n        current += delta[i];\n        moves = Math.min(moves, current);\n    }\n    return moves;\n}\n```", "similar_id": 1793, "target_id": 2355, "pair_id": ["1793", "2355"], "pair_title": ["Maximum Score of a Good Subarray", "Maximum Number of Books You Can Take"], "similar_content": "You are given an array of integers `nums` **(0-indexed)** and an integer `k`.\n\nThe **score** of a subarray `(i, j)` is defined as `min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)`. A **good** subarray is a subarray where `i <= k <= j`.\n\nReturn _the maximum possible **score** of a **good** subarray._\n\n**Example 1:**\n\n**Input:** nums = \\[1,4,3,7,4,5\\], k = 3\n**Output:** 15\n**Explanation:** The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) \\* (5-1+1) = 3 \\* 5 = 15. \n\n**Example 2:**\n\n**Input:** nums = \\[5,5,4,5,4,1,1,1\\], k = 0\n**Output:** 20\n**Explanation:** The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) \\* (4-0+1) = 4 \\* 5 = 20.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 2 * 104`\n*   `0 <= k < nums.length`", "target_content": "You are given a **0-indexed** integer array `books` of length `n` where `books[i]` denotes the number of books on the `ith` shelf of a bookshelf.\n\nYou are going to take books from a **contiguous** section of the bookshelf spanning from `l` to `r` where `0 <= l <= r < n`. For each index `i` in the range `l <= i < r`, you must take **strictly fewer** books from shelf `i` than shelf `i + 1`.\n\nReturn _the **maximum** number of books you can take from the bookshelf._\n\n**Example 1:**\n\n**Input:** books = \\[8,5,2,7,9\\]\n**Output:** 19\n**Explanation:**\n- Take 1 book from shelf 1.\n- Take 2 books from shelf 2.\n- Take 7 books from shelf 3.\n- Take 9 books from shelf 4.\nYou have taken 19 books, so return 19.\nIt can be proven that 19 is the maximum number of books you can take.\n\n**Example 2:**\n\n**Input:** books = \\[7,0,3,4,5\\]\n**Output:** 12\n**Explanation:**\n- Take 3 books from shelf 2.\n- Take 4 books from shelf 3.\n- Take 5 books from shelf 4.\nYou have taken 12 books so return 12.\nIt can be proven that 12 is the maximum number of books you can take.\n\n**Example 3:**\n\n**Input:** books = \\[8,2,3,7,3,4,0,1,4,3\\]\n**Output:** 13\n**Explanation:**\n- Take 1 book from shelf 0.\n- Take 2 books from shelf 1.\n- Take 3 books from shelf 2.\n- Take 7 books from shelf 3.\nYou have taken 13 books so return 13.\nIt can be proven that 13 is the maximum number of books you can take.\n\n**Constraints:**\n\n*   `1 <= books.length <= 105`\n*   `0 <= books[i] <= 105`", "public_similar_tests_input": " nums = \\[1,4,3,7,4,5\\], k = 3\n", "public_similar_tests_output": " 15\n", "public_target_tests_input": " books = \\[8,5,2,7,9\\]\n", "public_target_tests_output": " 19\n", "private_target_tests_input": ["[10, 7, 6, 8, 9]", "[1, 1, 1, 1, 1]", "[5, 10, 5, 1, 10]", "[3, 2, 1]", "[1]", "[100, 200, 300, 400, 500]", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "[5, 5, 5, 5, 5, 5]"], "private_target_tests_output": [], "target_source_code": "```java\nint maxBooks(int[] books) {\n    int n = books.length;\n    int max_books = 0;\n    \n    for (int l = 0; l < n; ++l) {\n        int r = l + 1, books_taken = books[l], min_taken = books[l];\n        max_books = Math.max(max_books, books_taken);\n        \n        while (r < n) {\n            min_taken = Math.min(min_taken, books[r]);\n            books_taken += min_taken;\n            max_books = Math.max(max_books, books_taken);\n            \n            if (min_taken <= 1) break; // Can't decrease further\n            ++r;\n        }\n    }\n    \n    return max_books;\n}\n```"}
{"num": 6, "language": "python", "similar_source_code": "```python\ndef findLengthOfShortestSubarray(arr):\n    n = len(arr)\n    left, right = 0, n - 1\n    while left < n - 1 and arr[left] <= arr[left + 1]:\n        left += 1\n    if left == n - 1:\n        return 0\n    while right > 0 and arr[right] >= arr[right - 1]:\n        right -= 1\n    result = min(n - left - 1, right)\n    i, j = 0, right\n    while i <= left and j < n:\n        if arr[i] <= arr[j]:\n            result = min(result, j - i - 1)\n            i += 1\n        else:\n            j += 1\n    return result\n```", "similar_id": 1574, "target_id": 581, "pair_id": ["1574", "581"], "pair_title": ["Shortest Subarray to be Removed to Make Array Sorted", "Shortest Unsorted Continuous Subarray"], "similar_content": "Given an integer array `arr`, remove a subarray (can be empty) from `arr` such that the remaining elements in `arr` are **non-decreasing**.\n\nReturn _the length of the shortest subarray to remove_.\n\nA **subarray** is a contiguous subsequence of the array.\n\n**Example 1:**\n\n**Input:** arr = \\[1,2,3,10,4,2,3,5\\]\n**Output:** 3\n**Explanation:** The shortest subarray we can remove is \\[10,4,2\\] of length 3. The remaining elements after that will be \\[1,2,3,3,5\\] which are sorted.\nAnother correct solution is to remove the subarray \\[3,10,4\\].\n\n**Example 2:**\n\n**Input:** arr = \\[5,4,3,2,1\\]\n**Output:** 4\n**Explanation:** Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either \\[5,4,3,2\\] or \\[4,3,2,1\\].\n\n**Example 3:**\n\n**Input:** arr = \\[1,2,3\\]\n**Output:** 0\n**Explanation:** The array is already non-decreasing. We do not need to remove any elements.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 105`\n*   `0 <= arr[i] <= 109`", "target_content": "Given an integer array `nums`, you need to find one **continuous subarray** that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.\n\nReturn _the shortest such subarray and output its length_.\n\n**Example 1:**\n\n**Input:** nums = \\[2,6,4,8,10,9,15\\]\n**Output:** 5\n**Explanation:** You need to sort \\[6, 4, 8, 10, 9\\] in ascending order to make the whole array sorted in ascending order.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** 0\n\n**Example 3:**\n\n**Input:** nums = \\[1\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-105 <= nums[i] <= 105`\n\n**Follow up:** Can you solve it in `O(n)` time complexity?", "public_similar_tests_input": " arr = \\[1,2,3,10,4,2,3,5\\]\n", "public_similar_tests_output": " 3\n", "public_target_tests_input": " nums = \\[2,6,4,8,10,9,15\\]\n", "public_target_tests_output": " 5\n", "private_target_tests_input": [" [1, 3, 2, 4, 5]", " [5, 4, 3, 2, 1]", " [1, 2, 3, 4, 5]", " [1, 5, 3, 2, 4]", " [2, 6, 4, 8, 10, 9, 15]", " [1, 3, 5, 4, 2, 6, 7]", " [1, 2, 4, 5, 3, 7, 8]", " [10, 9, 8, 7, 6, 5, 4]"], "private_target_tests_output": [], "target_source_code": "```python\ndef findUnsortedSubarray(nums):\n    sorted_nums = sorted(nums)\n    start, end = 0, len(nums) - 1\n    while start < len(nums) and nums[start] == sorted_nums[start]:\n        start += 1\n    while end > start and nums[end] == sorted_nums[end]:\n        end -= 1\n    return end - start + 1\n```"}
{"num": 7, "language": "c++", "similar_source_code": "```cpp\nint maxBooks(vector<int>& books) {\n    int n = books.size();\n    int max_books = 0;\n    \n    for (int l = 0; l < n; ++l) {\n        int r = l + 1, books_taken = books[l], min_taken = books[l];\n        max_books = max(max_books, books_taken);\n        \n        while (r < n) {\n            min_taken = min(min_taken, books[r]);\n            books_taken += min_taken;\n            max_books = max(max_books, books_taken);\n            \n            if (min_taken <= 1) break; // Can't decrease further\n            ++r;\n        }\n    }\n    \n    return max_books;\n}\n```", "similar_id": 2355, "target_id": 1793, "pair_id": ["2355", "1793"], "pair_title": ["Maximum Number of Books You Can Take", "Maximum Score of a Good Subarray"], "similar_content": "You are given a **0-indexed** integer array `books` of length `n` where `books[i]` denotes the number of books on the `ith` shelf of a bookshelf.\n\nYou are going to take books from a **contiguous** section of the bookshelf spanning from `l` to `r` where `0 <= l <= r < n`. For each index `i` in the range `l <= i < r`, you must take **strictly fewer** books from shelf `i` than shelf `i + 1`.\n\nReturn _the **maximum** number of books you can take from the bookshelf._\n\n**Example 1:**\n\n**Input:** books = \\[8,5,2,7,9\\]\n**Output:** 19\n**Explanation:**\n- Take 1 book from shelf 1.\n- Take 2 books from shelf 2.\n- Take 7 books from shelf 3.\n- Take 9 books from shelf 4.\nYou have taken 19 books, so return 19.\nIt can be proven that 19 is the maximum number of books you can take.\n\n**Example 2:**\n\n**Input:** books = \\[7,0,3,4,5\\]\n**Output:** 12\n**Explanation:**\n- Take 3 books from shelf 2.\n- Take 4 books from shelf 3.\n- Take 5 books from shelf 4.\nYou have taken 12 books so return 12.\nIt can be proven that 12 is the maximum number of books you can take.\n\n**Example 3:**\n\n**Input:** books = \\[8,2,3,7,3,4,0,1,4,3\\]\n**Output:** 13\n**Explanation:**\n- Take 1 book from shelf 0.\n- Take 2 books from shelf 1.\n- Take 3 books from shelf 2.\n- Take 7 books from shelf 3.\nYou have taken 13 books so return 13.\nIt can be proven that 13 is the maximum number of books you can take.\n\n**Constraints:**\n\n*   `1 <= books.length <= 105`\n*   `0 <= books[i] <= 105`", "target_content": "You are given an array of integers `nums` **(0-indexed)** and an integer `k`.\n\nThe **score** of a subarray `(i, j)` is defined as `min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)`. A **good** subarray is a subarray where `i <= k <= j`.\n\nReturn _the maximum possible **score** of a **good** subarray._\n\n**Example 1:**\n\n**Input:** nums = \\[1,4,3,7,4,5\\], k = 3\n**Output:** 15\n**Explanation:** The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) \\* (5-1+1) = 3 \\* 5 = 15. \n\n**Example 2:**\n\n**Input:** nums = \\[5,5,4,5,4,1,1,1\\], k = 0\n**Output:** 20\n**Explanation:** The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) \\* (4-0+1) = 4 \\* 5 = 20.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 2 * 104`\n*   `0 <= k < nums.length`", "public_similar_tests_input": " books = \\[8,5,2,7,9\\]\n", "public_similar_tests_output": " 19\n", "public_target_tests_input": " nums = \\[1,4,3,7,4,5\\], k = 3\n", "public_target_tests_output": " 15\n", "private_target_tests_input": ["nums = [1, 2, 3, 4, 5], k = 2", "nums = [1, 1, 1, 1, 1], k = 0", "nums = [1, 1, 1, 1, 1], k = 4", "nums = [1, 4, 3, 7, 4, 5], k = 3", "nums = [10, 10, 10], k = 0", "nums = [10, 10, 10], k = 2", "nums = [1, 100, 1, 100, 1], k = 1", "nums = [1, 100, 1, 100, 1], k = 3"], "private_target_tests_output": [], "target_source_code": "```cpp\nint minMoves(vector<int>& nums, int limit) {\n    int n = nums.size();\n    vector<int> delta(2 * limit + 2, 0);\n\n    for (int i = 0; i < n / 2; i++) {\n        int lo = min(nums[i], nums[n - 1 - i]) + 1;\n        int hi = max(nums[i], nums[n - 1 - i]) + limit;\n        delta[lo]--;\n        delta[nums[i] + nums[n - 1 - i]]--;\n        delta[hi + 1]++;\n    }\n    int moves = n, current = n;\n    for (int i = 2; i <= 2 * limit; i++) {\n        current += delta[i];\n        moves = min(moves, current);\n    }\n    return moves;\n}\n```"}