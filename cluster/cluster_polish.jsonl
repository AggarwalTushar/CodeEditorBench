{"num": 1, "title": "", "difficulty": "Medium", "efficient_code":"```cpp\nclass Solution {\npublic:\n    int expand(const string& s, int left, int right) {\n        while (left >= 0 && right < s.size() && s[left] == s[right]) {\n            --left;\n            ++right;\n        }\n        return (right - left - 2) / 2;\n    }\n    string longestPalindrome(string s) {\n        int start = 0, end = -1;\n        string t = '#';\n        for (char c: s) {\n            t += c;\n            t += '#';\n        }\n        t += '#';\n        s = t;\n        vector<int> arm_len;\n        int right = -1, j = -1;\n        for (int i = 0; i < s.size(); ++i) {\n            int cur_arm_len;\n            if (right >= i) {\n                int i_sym = j * 2 - i;\n                int min_arm_len = min(arm_len[i_sym], right - i);\n                cur_arm_len = expand(s, i - min_arm_len, i + min_arm_len);\n            } else {\n                cur_arm_len = expand(s, i, i);\n            }\n            arm_len.push_back(cur_arm_len);\n            if (i + cur_arm_len > right) {\n                j = i;\n                right = i + cur_arm_len;\n            }\n            if (cur_arm_len * 2 + 1 > end - start) {\n                start = i - cur_arm_len;\n                end = i + cur_arm_len;\n            }\n        }\n        string ans;\n        for (int i = start; i <= end; ++i) {\n            if (s[i] != '#') {\n                ans += s[i];\n            }\n        }\n        return ans;\n    }\n};```","source_code": "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\nclass Solution {\npublic:\n    string longestPalindrome(string s) {\n        int n = s.size();\n        if (n < 2) {\n            return s;\n        }\n        int maxLen = 1;\n        int begin = 0;\n        vector<vector<int>> dp(n, vector<int>(n));\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = true;\n        }\n        for (int L = 2; L <= n; L++) {\n            for (int i = 0; i < n; i++) {\n                int j = L + i - 1;\n                if (j >= n) {\n                    break;\n                }\n                if (s[i] != s[j]) {\n                    dp[i][j] = false;\n                } else {\n                    if (j - i < 3) {\n                        dp[i][j] = true;\n                    } else {\n                        dp[i][j] = dp[i + 1][j - 1];\n                    }\n                }\n                if (dp[i][j] && j - i + 1 > maxLen) {\n                    maxLen = j - i + 1;\n                    begin = i;\n                }\n            }\n        }\n        return s.substr(begin, maxLen);\n    }\n};```", "scource_lang": "c++", "average_running_time": 0, "average_memory": 0, "public_tests_input": " s =  \"babad \"\n", "public_tests_output": "  \"bab \"\n", "private_tests_input": ["\"\"", "\"a\"", "\"ab\"", "\"bab\"", "\"babad\"", "\"cbbd\"", "\":;''ll;;:\"", "\"123$#@!#"], "private_tests_output": []}
{"num": 2, "title": "", "difficulty": "Medium", "efficient_code":"java\nclass Solution {\n    public String convert(String s, int numRows) {\n        int n = s.length(), r = numRows;\n        if (r == 1 || r >= n) {\n            return s;\n        }\n        StringBuffer[] mat = new StringBuffer[r];\n        for (int i = 0; i < r; ++i) {\n            mat[i] = new StringBuffer();\n        }\n        for (int i = 0, x = 0, t = r * 2 - 2; i < n; ++i) {\n            mat[x].append(s.charAt(i));\n            if (i % t < r - 1) {\n                ++x;\n            } else {\n                --x;\n            }\n        }\n        StringBuffer ans = new StringBuffer();\n        for (StringBuffer row : mat) {\n            ans.append(row);\n        }\n        return ans.toString();\n    }\n}","source_code": "```java\nclass Solution {\n    public String convert(String s, int numRows) {\n        int n = s.length(), r = numRows;\n        if (r == 1 || r >= n) {\n            return s;\n        }\n        int t = r * 2 - 2;\n        int c = (n + t - 1) / t * (r - 1);\n        char[][] mat = new char[r][c];\n        for (int i = 0, x = 0, y = 0; i < n; ++i) {\n            mat[x][y] = s.charAt(i);\n            if (i % t < r - 1) {\n                ++x;\n            } else {\n                --x;\n                ++y;\n            }\n        }\n        StringBuffer ans = new StringBuffer();\n        for (char[] row : mat) {\n            for (char ch : row) {\n                if (ch != 0) {\n                    ans.append(ch);\n                }\n            }\n        }\n        return ans.toString();\n    }\n}```", "scource_lang": "java", "average_running_time": 0, "average_memory": 0, "public_tests_input": " s =  \"PAYPALISHIRING \", numRows = 3\n", "public_tests_output": "  \"PAHNAPLSIIGYIR \"\n\n", "private_tests_input": ["PAYPALISHIRING, 4", "PAYPALISHIRING, 1", "AB, 3", "ABCDEFGHI, 4", "ABCDEFGHIJKLMNOP, 4", "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890, 6", "PAYPALISHIRING, 2", "PAYPALISHIRING, 10"], "private_tests_output": []}
{"num": 3, "title": "", "difficulty": "Hard", "efficient_code":"```python\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        if len(nums1) > len(nums2):\n            return self.findMedianSortedArrays(nums2, nums1)\n        infinty = 2**40\n        m, n = len(nums1), len(nums2)\n        left, right = 0, m\n        median1, median2 = 0, 0\n        while left <= right:\n            i = (left + right) // 2\n            j = (m + n + 1) // 2 - i\n            nums_im1 = (-infinty if i == 0 else nums1[i - 1])\n            nums_i = (infinty if i == m else nums1[i])\n            nums_jm1 = (-infinty if j == 0 else nums2[j - 1])\n            nums_j = (infinty if j == n else nums2[j])\n            if nums_im1 <= nums_j:\n                median1, median2 = max(nums_im1, nums_jm1), min(nums_i, nums_j)\n                left = i + 1\n            else:\n                right = i - 1\n        return (median1 + median2) / 2 if (m + n) % 2 == 0 else median1```","source_code": "```python\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        def getKthElement(k):\n            index1, index2 = 0, 0\n            while True:\n                if index1 == m:\n                    return nums2[index2 + k - 1]\n                if index2 == n:\n                    return nums1[index1 + k - 1]\n                if k == 1:\n                    return min(nums1[index1], nums2[index2])\n                newIndex1 = min(index1 + k // 2 - 1, m - 1)\n                newIndex2 = min(index2 + k // 2 - 1, n - 1)\n                pivot1, pivot2 = nums1[newIndex1], nums2[newIndex2]\n                if pivot1 <= pivot2:\n                    k -= newIndex1 - index1 + 1\n                    index1 = newIndex1 + 1\n                else:\n                    k -= newIndex2 - index2 + 1\n                    index2 = newIndex2 + 1\n        m, n = len(nums1), len(nums2)\n        totalLength = m + n\n        if totalLength % 2 == 1:\n            return getKthElement((totalLength + 1) // 2)\n        else:\n            return (getKthElement(totalLength // 2) + getKthElement(totalLength // 2 + 1)) / 2```", "scource_lang": "python", "average_running_time": 0, "average_memory": 0, "public_tests_input": " nums1 = \\[1,3\\], nums2 = \\[2\\]\n", "public_tests_output": " 2.00000\n", "private_tests_input": ["nums1 = [1, 3], nums2 = [2]", "nums1 = [1, 2], nums2 = [3, 4]", "nums1 = [1, 3, 5], nums2 = [2, 4, 6]", "nums1 = [1, 2, 3], nums2 = [4, 5, 6]", "nums1 = [1], nums2 = []", "nums1 = [], nums2 = [1]", "nums1 = [1, 1], nums2 = [1, 1]", "nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10]"], "private_tests_output": []}
